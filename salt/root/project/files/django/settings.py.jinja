"""
Django settings for project {{ salt['pillar.get']('project:name') }}.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '{{ salt['pillar.get']('project:django:settings:secret_key') }}'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = {{ salt['pillar.get']('project:django:settings:debug') }}

ALLOWED_HOSTS = [
{%- if salt['pillar.get']('project:environment:name') == 'dev' %}
{%- for host in salt['pillar.get']('project:django:settings:allowed_host') %}
    '{{ host }}',
{%- endfor %}
{%- else %}
    '*',
{%- endif %}
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = '{{ salt['pillar.get']('project:django:settings:time_zone') }}'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIR = [
    os.path.join(BASE_DIR, 'static'),
]

# Caches

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': '127.0.0.1:11211',
    }
}


# Sessions

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': '{{ salt['pillar.get']('project:django:settings:database:engine') }}',
        'NAME': '{{ salt['pillar.get']('project:django:settings:database:name') }}',
        'USER': '{{ salt['pillar.get']('project:django:settings:database:user') }}',
        'PASSWORD': '{{ salt['pillar.get']('project:django:settings:database:pass') }}',
        'HOST': '{{ salt['pillar.get']('project:django:settings:database:host') }}',
        'PORT': '{{ salt['pillar.get']('project:django:settings:database:port') }}',
        'OPTIONS': {
            'isolation_level': 'read committed',
            'sql_mode': 'STRICT_TRANS_TABLES',
        },
        {%- if salt['pillar.get']('project:django:settings:debug') %}
        'TEST': {
            'NAME': 'test_{{ salt['pillar.get']('project:django:settings:database:name') }}',
        },
        {%- endif %}
        'ATOMIC_REQUESTS': {{ salt['pillar.get']('project:django:settings:database:atomic') }},
    }
}


# Error Reporting

ADMINS = [
{%- for admin in salt['pillar.get']('project:django:settings:admins') %}
    ('{{ admin['name'] }}', '{{ admin['email'] }}'),
{%- endfor %}
]


# Email

EMAIL_BACKEND = '{{ salt['pillar.get']('project:django:settings:email:backend') }}'
EMAIL_HOST = '{{ salt['pillar.get']('project:django:settings:email:host') }}'
{%- if salt['pillar.get']('project:environment:name') != 'dev' %}
EMAIL_HOST_USER = '{{ salt['pillar.get']('project:django:settings:email:host_user') }}'
EMAIL_HOST_PASSWORD = '{{ salt['pillar.get']('project:django:settings:email:host_password') }}'
{%- endif %}
EMAIL_PORT = {{ salt['pillar.get']('project:django:settings:email:port') }}
EMAIL_SUBJECT_PREFIX = '[{{ salt['pillar.get']('project:django:settings:email:subject_prefix') }}] '
EMAIL_USE_LOCALTIME = True
EMAIL_USE_SSL = {{ salt['pillar.get']('project:django:settings:email:use_ssl') }}
EMAIL_USE_TLS = {{ salt['pillar.get']('project:django:settings:email:use_tls') }}
DEFAULT_FROM_EMAIL = '{{ salt['pillar.get']('project:django:settings:email:default_from') }}'
SERVER_EMAIL = '{{ salt['pillar.get']('project:django:settings:email:server') }}'


# CSRF

CSRF_COOKIE_AGE = None
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = '{{ salt['pillar.get']('project:name') }}'
CSRF_COOKIE_SECURE = True
CSRF_USE_SESSIONS = True


DATE_FORMAT = 'm/d/y'
DATETIME_FORMAT = 'm/d/y H:i:s'


# Logging

LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'filters': {
    'require_debug_false': {
      '()': 'django.utils.log.RequireDebugFalse',
    },
    'require_debug_true': {
      '()': 'django.utils.log.RequireDebugTrue',
    },
  },
  'formatters': {
    'verbose': {
      'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
      'style': '{',
    },
  },
  'handlers': {
    'debug': {
      'level': 'DEBUG',
      'filters': ['require_debug_true'],
      'class': 'logging.handlers.RotatingFileHandler',
      'filename': '{{ salt['pillar.get']('project:environment:log') }}/{{ salt['pillar.get']('project:name') }}.log',
      'maxBytes': 1024*1024*5,
      'backupCount': 5,
      'formatter': 'verbose',
    },
    'default': {
      'level': 'WARNING',
      'filters': ['require_debug_false'],
      'class': 'logging.handlers.RotatingFileHandler',
      'filename': '{{ salt['pillar.get']('project:environment:log') }}/{{ salt['pillar.get']('project:name') }}.log',
      'maxBytes': 1024*1024*5,
      'backupCount': 5,
      'formatter': 'verbose',
    },
    'critical': {
      'level': 'ERROR',
      'filters': ['require_debug_false'],
      'class': 'django.utils.log.AdminEmailHandler',
    },
  },
  'loggers': {
    '': {
      'handlers': ['default', 'debug', 'critical'],
      'level': 'DEBUG',
      'propagate': True,
    },
    'django.request': {
      'handlers': ['default', 'debug', 'critical'],
      'level': 'WARNING',
      'propagate': True,
    },
    'django.server': {
      'handlers': ['default', 'debug', 'critical'],
      'level': 'WARNING',
      'propagate': True,
    },
    'django.template': {
      'handlers': ['debug'],
      'level': 'DEBUG',
      'propagate': True,
    },
    'django.security.SuspiciousOperation': {
      'handlers': ['default', 'debug', 'critical'],
      'level': 'ERROR',
      'propagate': True,
    },
    'django.db.backends.schema': {
      'handlers': ['default', 'debug'],
      'level': 'DEBUG',
      'propagate': True,
    },
  }
}
